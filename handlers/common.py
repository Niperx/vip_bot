import logging
import sqlite3
import calendar
import locale
import config
from datetime import datetime, date
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from modules.buttons_list import menu_kb, access_kb, rates_kb, pending_payment_kb, cancel_kb
from modules.admins_list import ADMINS

bot = Bot(token=config.TOKEN)
admin = ADMINS[0]
locale.setlocale(locale.LC_ALL, "ru")


class PaymentStage(StatesGroup):
    waiting_for_pending = State()


def add_months(sourcedate, months):
    month = sourcedate.month - 1 + months
    year = sourcedate.year + month // 12
    month = month % 12 + 1
    day = min(sourcedate.day, calendar.monthrange(year, month)[1])
    return date(year, month, day)


def create_user(user_id, link):  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–ª–¥–∞—Ç–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    user_info = (user_id, False, None, link, datetime.now())
    conn = sqlite3.connect('db/main.db')
    cur = conn.cursor()
    cur.execute("INSERT INTO users VALUES(?,?,?,?,?);", user_info)
    conn.commit()


def check_count(user_id):  # –∫–æ–ª-–≤–æ —Å–æ–ª–¥–∞—Ç –Ω–∞ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    conn = sqlite3.connect('db/main.db')
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM users WHERE user_id = ?", (user_id,))
    count = cur.fetchall()[0][0]
    return count


def load_user(user_id):  # –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–π –∏–Ω—Ñ—ã –æ —Å–æ–ª–¥–∞—Ç–µ
    conn = sqlite3.connect('db/main.db')
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    result = cur.fetchone()
    return result


def edit_user(user_id, hm):  # sub_time - –≤—Ä–µ–º—è —Ä–µ–≥–∏ + –º–µ—Å—è—Ü—ã, hm - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Å—è—Ü–µ–≤
    conn = sqlite3.connect('db/main.db')
    cur = conn.cursor()
    cur.execute(
        "UPDATE users SET subscribed = ?, sub_time = ? WHERE user_id = ? ",
        (1, add_months(datetime.now(), hm), user_id))  # datetime.now() + sub_time
    conn.commit()


def delete_sub(user_id):
    conn = sqlite3.connect('db/main.db')
    cur = conn.cursor()
    cur.execute("UPDATE users SET subscribed = ?, sub_time = ? WHERE user_id = ?", (0, None, user_id,))
    conn.commit()


def get_user_stats():
    conn = sqlite3.connect('db/main.db')
    cur = conn.cursor()
    cur.execute("SELECT * FROM users")
    result = cur.fetchall()
    return result


def get_info_about_user_message(message):
    text = f'\n##### {datetime.now()} #####\n'
    text += f'ID: {message.from_user.id}, Text: {message.text}'
    try:
        text += f'\nUsername: {message.from_user.username},' \
                f' Name: {message.from_user.first_name},' \
                f' Surname: {message.from_user.last_name} '
    except Exception as e:
        logging.exception(e)
        text += '–ù–µ—Ç –∏–º–µ–Ω–∏'
    return text


def get_info_about_user_callback(callback):
    text = f'\n##### {datetime.now()} #####\n'
    text += f'ID: {callback.from_user.id}, Text: {callback.data}'
    try:
        text += f'\nUsername: {callback.from_user.username},' \
                f' Name: {callback.from_user.first_name},' \
                f' Surname: {callback.from_user.last_name} '
    except Exception as e:
        logging.exception(e)
        text += '–ù–µ—Ç –∏–º–µ–Ω–∏'
    return text


async def cmd_start(message: types.Message):
    print(get_info_about_user_message(message))
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ –±–æ—Ç –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª + —á–∞—Ç –ö—Ä–∏–ø—Ç–æ–ª–æ–≥–∞",
                         reply_markup=menu_kb)
    cnt = check_count(message.from_user.id)
    if not cnt:
        try:
            create_user(message.from_user.id, f'https://t.me/{message.from_user.username}')
        except:
            create_user(message.from_user.id, f'{message.from_user.first_name} {message.from_user.last_name}')


async def cmd_access(message: types.Message):
    print(get_info_about_user_message(message))
    await message.answer("–£—Å–ª–æ–≤–∏—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—à–∏ –≤–∏–ø —Ä–µ—Å—É—Ä—Å—ã (—á–∞—Ç/–∫–∞–Ω–∞–ª/–º–∞—Ä–∞—Ñ–æ–Ω –∫–∞–Ω–∞–ª/–æ–±—É—á–∞—é—â–∏–µ –≤–∏–¥–µ–æ –∏ —Ç.–¥.)\n"
                         "üü† 3 –º–µ—Å—è—Ü–∞ (–ø—Ä–æ–±–Ω—ã–π) : 340$\n"
                         "üü° 1 –≥–æ–¥ : 580$\n"
                         "üü¢ –ë–µ—Å—Å—Ä–æ—á–Ω–æ : 850$",
                         reply_markup=access_kb, parse_mode='Markdown')


# –ø—Ä–æ–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
async def cmd_profile(message: types.Message):
    print(get_info_about_user_message(message))
    user_info = load_user(message.from_user.id)
    print(user_info)
    subs = 'üí≥ –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫'
    subs_text = '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    sub_content = ''
    if user_info[1]:
        subs_end = datetime.strptime(user_info[2], '%Y-%m-%d')
        subs_text = subs_end.strftime('%a, %d %b %Y')  # –≤—Ç, 9 –º–∞—è 2023–≥
        days = subs_end - datetime.now()
        subs = f'üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞–Ω–∞–ª—ã - {days.days} –¥–Ω.'
        sub_content = '–î–æ—Å—Ç—É–ø—ã :\n' \
                      '–ß–∞—Ç - https://t.me/+KbKbcD_w6A0wYTQy\n' \
                      '–ö–∞–Ω–∞–ª - https://t.me/+pX5c6_9xsvM3MjBi\n' \
                      'C–µ—Ç–∫–∏ –±–∞–π–±–∏—Ç - https://t.me/+5ZCXziyOJcQzY2Vi\n' \
                      '–ú–∞—Ä–∞—Ñ–æ–Ω - https://t.me/+MiRU14aTKO9iODky'
    await message.answer(
        f"id: [{message.from_user.id}](tg://user?id{message.from_user.id}) - üë§ [{message.from_user.first_name}](tg://user?id{message.from_user.id})\n\n"
        f"*–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:*\n"
        f"{subs}\n"
        f"–î–æ: {subs_text.lower()}\n\n"
        f"{sub_content}",
        parse_mode='Markdown')


async def cmd_benefit(message: types.Message):
    print(get_info_about_user_message(message))
    await message.answer(
        f"‚ñ™Ô∏è –í–∏–ø —á–∞—Ç , –±–µ–∑ —Ñ–ª—É–¥–∞, —Ç–æ–ª—å–∫–æ –ø–æ –∫—Ä–∏–ø—Ç–µ, –µ—Å—Ç—å –º–Ω–æ–≥–æ –æ—á–µ–Ω—å —Ç–æ–ª–∫–æ–≤—ã—Ö —Ä–µ–±—è—Ç –∫–æ—Ç–æ—Ä—ã–µ –∏ –≤–∞–º –º–æ–≥—É—Ç –ø–æ–º–æ—á—å, —É –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ —á–µ–º—É-—Ç–æ –Ω–∞—É—á–∏—Ç—Å—è, –≤ —á–∞—Ç–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞—à–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º —Ç–æ—Ä–≥–æ–≤–ª–µ —Å–µ—Ç–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π.\n"
        f"‚ñ™Ô∏è –í–∏–ø –∫–∞–Ω–∞–ª —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —è —Ç–æ—Ä–≥—É—é —Å–æ —Å–≤–æ–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ + –∏–Ω–æ–≥–¥–∞ —Ä–∞–∑–ª–∏—á–Ω–∞—è –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n"
        f"‚ñ™Ô∏è –ö–∞–Ω–∞–ª —Å –º–∞—Ä–∞—Ñ–æ–Ω–æ–º, —à–æ—É –¥–ª—è —é—Ç—É–± –≤ –∫–æ—Ç–æ—Ä–æ–º –º—ã —Ç–æ—Ä–≥—É–µ–º —Å—É–º–º–æ–π –≤ 2000 USDT –∏ —Å–º–æ—Ç—Ä–∏–º —Å–∫–æ–ª—å–∫–æ —Å–¥–µ–ª–∞–µ–º –ø—Ä–æ—Ñ–∏—Ç–∞ –∑–∞ –º–µ—Å—è—Ü, –ø–ª–∞–Ω–∏—Ä—É—é –ø—Ä–æ–≤–æ–¥–∏—Ç—å –µ–≥–æ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü, –≤ –∫–∞–Ω–∞–ª–µ –¥–∞—é —Å–∏–≥–Ω–∞–ª—ã –æ –≤—Ö–æ–¥–∞—Ö –∏ –≤—ã—Ö–æ–¥–∞—Ö –∏–∑ —Å–¥–µ–ª–æ–∫.\n"
        f"‚ñ™Ô∏è –í–∏–¥–µ–æ –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏–µ –æ—Ç –º–µ–Ω—è,  45 –º–∏–Ω—É—Ç —Å–∂–∞—Ç–æ–π, –≤–∞–∂–Ω–æ–π –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤\n"
        f"‚ñ™Ô∏è –ö–∞–Ω–∞–ª —Å–æ —Å–ø–æ—Ç–æ–≤–æ–π –º–æ–µ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π –Ω–∞ Bybit, —Å–µ—Ç–æ—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è, –Ω–æ —Å–ø–æ—Ç–æ–≤–∞—è \n"
        f"‚ñ™Ô∏è –°–±–æ—Ä –ø—É–ª–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç—ã, –≤ –ø—Ä–æ–µ–∫—Ç—ã –≥–¥–µ –≤–∞–∂–µ–Ω –±–æ–ª—å—à–æ–π –≤–∫–ª–∞–¥ –¥–ª—è –±–û–ª—å—à–∏—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤ / —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—É–ª–ª—ã STEPN (–¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã)\n"
        f"‚ñ™Ô∏è –ù—É –∏ –º–æ—è –ª–∏—á–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –≤–∞—Å –ø–æ—á—Ç–∏ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ –¥–ª—è –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ , –ª—é–±–æ–π –ø–æ–º–æ—â–∏ –ø–æ –∫—Ä–∏–ø—Ç–µ.\n",
        parse_mode='Markdown')


async def cmd_stats(message: types.Message):
    print(get_info_about_user_message(message))
    await message.answer(f"–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ–µ –≤—ã–ª–µ–∑–µ—Ç –≤–∏–¥–µ–æ + –ø–∞—Ä—É —Å–∫—Ä–∏–Ω–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —è –¥–∞–º —Ç–µ–±–µ —Å–∫–æ—Ä–æ ",
                         parse_mode='Markdown')


async def cmd_check_subs(message: types.Message):
    print(get_info_about_user_message(message))
    users_data = get_user_stats()
    subs = []
    for user in users_data:
        if user[1] != 0:
            subs.append(user)
    print(subs)
    text = '–ù–µ—Ç –±–ª–∏–∑–∂–∞–π—à–∏—Ö –æ—Ç–ø–∏—Å–æ–∫'
    if subs:
        subs_end = []
        for sub in subs:
            sub_end = datetime.strptime(sub[2], '%Y-%m-%d')
            days = sub_end - datetime.now()
            if days.days < 10:
                subs_end.append(sub)

        if subs_end:
            text = ''
        for user in subs_end:
            status = "–ê–∫—Ç–∏–≤–Ω–∞" if user[1] != 0 else "–ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
            user_end = datetime.strptime(user[2], '%Y-%m-%d') - datetime.now()
            text += f'*ID*: `{user[0]}`\n' \
                    f'*Profile link:* {user[3]}\n' \
                    f'*–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:* {status}\n' \
                    f'*–î–æ –∫–æ–Ω—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏:* {user_end.days} –¥–Ω.\n\n'
    await message.reply(text, parse_mode='Markdown')


async def cmd_delete_subs(message: types.Message):
    print(get_info_about_user_message(message))
    print(message.get_args())
    delete_sub(message.get_args())
    await message.reply('–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')


# callbacks
async def process_benefit(callback_query: types.CallbackQuery):
    print(get_info_about_user_callback(callback_query))
    await callback_query.message.edit_text(f"ü§ò –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º —Ç–∞—Ä–∏—Ñ:",
                                           reply_markup=rates_kb,
                                           parse_mode='Markdown')


# –≤–∏–¥—ã –ø–ª–∞—Ç–µ–∂–µ–π
async def process_three_month(callback_query: types.CallbackQuery, state: FSMContext):
    print(get_info_about_user_callback(callback_query))
    await state.update_data(plan='3 –º–µ—Å—è—Ü–∞')
    await callback_query.message.edit_text(
        f"–û–ø–ª–∞—Ç–∏—Ç–µ 340 usdt –Ω–∞ –ª—é–±–æ–π –∏–∑ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –ª–∏–±–æ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.\n\n"
        f"ERC20 USDT : \n`0xBF10ecA7492bB0aB812A1635C8779E3E2A0E2147`\n"
        f"BEP20 USDT : \n`0xBF10ecA7492bB0aB812A1635C8779E3E2A0E2147`\n"
        f"BEP20 BUSD : \n`0xBF10ecA7492bB0aB812A1635C8779E3E2A0E2147`\n"
        f"TRC20 USDT : \n`TTg3Sv8dpgjhBeAixA4t2RgSBrqaJ3dmJw`",
        reply_markup=pending_payment_kb,
        parse_mode='Markdown')


async def process_one_year(callback_query: types.CallbackQuery, state: FSMContext):
    print(get_info_about_user_callback(callback_query))
    await state.update_data(plan='1 –≥–æ–¥')
    await callback_query.message.edit_text(
        f"–û–ø–ª–∞—Ç–∏—Ç–µ 580 usdt –Ω–∞ –ª—é–±–æ–π –∏–∑ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –ª–∏–±–æ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.\n\n"
        f"ERC20 USDT : \n`0xBF10ecA7492bB0aB812A1635C8779E3E2A0E2147`\n"
        f"BEP20 USDT : \n`0xBF10ecA7492bB0aB812A1635C8779E3E2A0E2147`\n"
        f"BEP20 BUSD : \n`0xBF10ecA7492bB0aB812A1635C8779E3E2A0E2147`\n"
        f"TRC20 USDT : \n`TTg3Sv8dpgjhBeAixA4t2RgSBrqaJ3dmJw`",
        reply_markup=pending_payment_kb,
        parse_mode='Markdown')


async def process_indefinitely(callback_query: types.CallbackQuery, state: FSMContext):
    print(get_info_about_user_callback(callback_query))
    await state.update_data(plan='–±–µ—Å—Å—Ä–æ—á–Ω–æ')
    await callback_query.message.edit_text(
        f"–û–ø–ª–∞—Ç–∏—Ç–µ 850 usdt –Ω–∞ –ª—é–±–æ–π –∏–∑ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –ª–∏–±–æ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.\n\n"
        f"ERC20 USDT : \n`0xBF10ecA7492bB0aB812A1635C8779E3E2A0E2147`\n"
        f"BEP20 USDT : \n`0xBF10ecA7492bB0aB812A1635C8779E3E2A0E2147`\n"
        f"BEP20 BUSD : \n`0xBF10ecA7492bB0aB812A1635C8779E3E2A0E2147`\n"
        f"TRC20 USDT : \n`TTg3Sv8dpgjhBeAixA4t2RgSBrqaJ3dmJw`",
        reply_markup=pending_payment_kb,
        parse_mode='Markdown')


async def process_pending_payment(callback_query: types.CallbackQuery):
    print(get_info_about_user_callback(callback_query))
    await callback_query.message.edit_text(f"–û–∂–∏–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...\n\n"
                                           f"‚ùóÔ∏è –ü–†–ò–ö–†–ï–ü–ò–¢–ï –§–û–¢–û –ß–ï–ö–ê –õ–ò–ë–û –°–°–´–õ–ö–£ ‚ùóÔ∏è\n\n"
                                           f'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏',
                                           reply_markup=cancel_kb,
                                           parse_mode='Markdown')
    await PaymentStage.waiting_for_pending.set()


# –ø–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–∫—É
async def cmd_get_photo(message: types.Message, state: FSMContext):
    print(get_info_about_user_message(message))
    user_data = await state.get_data()
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –æ–∂–∏–¥–∞–π—Ç–µ...')
    await bot.send_message(admin,
                           f"–ü–æ–ø—ã—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ *{user_data['plan'].upper()}*\n\n"
                           f'–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"+3" _- 3 –º–µ—Å—è—Ü–∞_, "+12" _- 1 –≥–æ–¥_, "+00" _- –±–µ—Å—Å—Ä–æ—á–Ω–æ_\n\n'
                           f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{message.from_user.id}](tg://user?id{message.from_user.id}) - üë§ [{message.from_user.first_name}](https://t.me/{message.from_user.username}):',
                           parse_mode='Markdown')

    await bot.forward_message(admin, from_chat_id=message.chat.id, message_id=message.message_id)

    await state.finish()


async def cmd_get_confirmation(message: types.Message):
    print(get_info_about_user_message(message))
    confirmation = message.text
    print(message)
    print(confirmation)
    if confirmation[0] == '+':
        chat_pasta = '–î–æ—Å—Ç—É–ø—ã :\n\n' \
                     '–ß–∞—Ç - https://t.me/+KbKbcD_w6A0wYTQy\n' \
                     '–ö–∞–Ω–∞–ª - https://t.me/+pX5c6_9xsvM3MjBi\n' \
                     'C–µ—Ç–∫–∏ –±–∞–π–±–∏—Ç - https://t.me/+5ZCXziyOJcQzY2Vi\n' \
                     '–ú–∞—Ä–∞—Ñ–æ–Ω - https://t.me/+MiRU14aTKO9iODky'
        if confirmation[1:] == '3':
            print('YES3')
            edit_user(message.reply_to_message.forward_from.id, 3)
            await bot.send_message(message.reply_to_message.forward_from.id,
                                   'üëå –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 3 –º–µ—Å—è—Ü–∞.\n' + chat_pasta,
                                   reply_markup=menu_kb)
            await message.answer('–û–¥–æ–±—Ä–µ–Ω–æ –Ω–∞ 3 –º–µ—Å—è—Ü–∞')
        elif confirmation[1:] == '12':
            print('YES12')
            edit_user(message.reply_to_message.forward_from.id, 12)
            await bot.send_message(message.reply_to_message.forward_from.id,
                                   'üëå –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤.\n' + chat_pasta,
                                   reply_markup=menu_kb)
            await message.answer('–û–¥–æ–±—Ä–µ–Ω–æ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤')
        elif confirmation[1:] == '00':
            print('YES00')
            edit_user(message.reply_to_message.forward_from.id, 300)
            await bot.send_message(message.reply_to_message.forward_from.id,
                                   'üëå –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–≤—Å–µ–≥–¥–∞.\n' + chat_pasta,
                                   reply_markup=menu_kb)
            await message.answer('–û–¥–æ–±—Ä–µ–Ω–æ –Ω–∞ –±–µ—Å—Å—Ä–æ—á–Ω–æ')
        else:
            print('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
            await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
            return
    elif '-' in confirmation:
        print('NO')
        await bot.send_message(message.reply_to_message.forward_from.id,
                               '–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à—É –æ–ø–ª–∞—Ç—É, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ : @cryptolog_admin')


async def process_cancel_pending_payment(callback_query: types.CallbackQuery, state: FSMContext):
    await state.reset_state()
    print(get_info_about_user_callback(callback_query))
    await callback_query.message.edit_text(f"ü§ò –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º —Ç–∞—Ä–∏—Ñ:",
                                           reply_markup=rates_kb,
                                           parse_mode='Markdown')


def register_handlers_common(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands="start", state='*')
    dp.register_message_handler(cmd_access, text="‚≠êÔ∏è–¢–∞—Ä–∏—Ñ—ã", state='*')
    dp.register_message_handler(cmd_profile, text="üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å", state='*')
    dp.register_message_handler(cmd_benefit, text="üìã –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ", state='*')
    dp.register_message_handler(cmd_stats, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–∞", state='*')
    dp.register_message_handler(cmd_check_subs, commands="subs", is_admin=True, state='*')
    dp.register_message_handler(cmd_delete_subs, commands="delete", is_admin=True, state='*')
    dp.register_callback_query_handler(process_benefit, lambda c: c.data == 'access_btn', state='*')

    dp.register_callback_query_handler(process_three_month, lambda c: c.data == 'three_month', state='*')
    dp.register_callback_query_handler(process_one_year, lambda c: c.data == 'one_year', state='*')
    dp.register_callback_query_handler(process_indefinitely, lambda c: c.data == 'indefinitely', state='*')

    dp.register_callback_query_handler(process_pending_payment, lambda c: c.data == 'pending_payment', state='*')

    dp.register_callback_query_handler(process_cancel_pending_payment, lambda c: c.data == 'cancel_pending_payment',
                                       state=PaymentStage.waiting_for_pending)

    dp.register_message_handler(cmd_get_photo, content_types=types.ContentType.ANY,
                                state=PaymentStage.waiting_for_pending)

    dp.register_message_handler(cmd_get_confirmation, is_admin=True, state='*')
